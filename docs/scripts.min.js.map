{"version":3,"sources":["card/card-generator.js","card/gestures-camera.js","nav/nav.js","sidebar/sidebar.js"],"names":["appendDiv","parent","div","document","createElement","appendChild","getIconThemeByEventType","iconName","eventType","isCritical","type","hasAttachedImage","event","data","image","createCard","ribbon","getElementById","card","classList","add","setSize","size","setType","setCardHeader","header","icon","src","title","innerHTML","trimTitle","close","str","cardSize","allowedCharWidth","undefined","length","slice","setBasicInfo","basicInfo","source","time","appendCriticalDetails","details","appendDescription","description","appendPlayer","track","player","content","querySelector","albumcover","artist","name","volume","clone","importNode","appendAttachedImage","container","camera","setAttribute","progress","srcset","sizes","appendButtons","buttons","buttonRow","forEach","buttonText","i","button","appendMeasurements","temperature","humidity","measurements","measurementData","push","measurement","markLastElementInCard","lastChild","contains","placeExpandButton","expand","expandableSibling","lastElementChild","previousElementSibling","appendCameraInterface","cameraInterface","generateCards","cardsData","events","xhr","XMLHttpRequest","open","onreadystatechange","this","readyState","JSON","parse","response","send","cameraProgress","isTouchDevice","documentElement","turnGestureInterfaceOn","setGestures","cameraStyle","window","getComputedStyle","initialBackgroundSize","parseInt","getPropertyValue","currentGesture","currentGestureName","initialFingerDistance","prevFingerAtan","recognizeMoves","constants","cameraState","currentBackgroundSize","currentPosition","currentBrightness","addEventListener","setPointerCapture","pointerId","startX","x","startY","y","isPrimary","Math","sqrt","pow","panX","pinch","rotate","recognizeGesture","recognizeTwoFingerGesture","console","log","dx","calculateNewDistance","abs","fixedFinger","movedFinger","_currentGesture$","style","backgroundPositionX","newDistance","zoomDelta","newBackgroundSize","backgroundSize","zoomPercentValue","round","firstElementChild","fingerAtan","atan2","increment","webkitFilter","cancelGesture","pop","navItems","getElementsByClassName","navs","children","toggle","e","j","target","parentNode","remove"],"mappings":"aAAA,IAAAA,UAAA,SAAAC,GACA,IAAAC,EAAAC,SAAAC,cAAA,OAEA,OADAH,EAAAI,YAAAH,GACAA,GAGAI,wBAAA,SAAAC,EAAAC,GACA,OAAAC,WAAAD,GACAD,EAAA,SADAA,GAIAE,WAAA,SAAAC,GACA,MAAA,aAAAA,GAGAC,iBAAA,SAAAC,GACA,QAAAA,EAAAC,SAAAD,EAAAC,KAAAC,SAAAF,EAAAC,KAAAH,MAAA,UAAAE,EAAAC,KAAAH,OAGAK,WAAA,WACA,IAAAC,EAAAb,SAAAc,eAAA,UACAC,EAAAlB,UAAAgB,GAEA,OADAE,EAAAC,UAAAC,IAAA,QACAF,GAGAG,QAAA,SAAAT,EAAAM,GACAA,EAAAC,UAAAC,IAAA,QAAAR,EAAAU,OAGAC,QAAA,SAAAX,EAAAM,GACAT,WAAAG,EAAAF,OACAQ,EAAAC,UAAAC,IAAA,iBAEAT,iBAAAC,IACAM,EAAAC,UAAAC,IAAA,oBAIAI,cAAA,SAAAZ,EAAAM,GACA,IAAAO,EAAAzB,UAAAkB,GACAO,EAAAN,UAAAC,IAAA,aAEA,IAAAM,EAAAvB,SAAAC,cAAA,OACAsB,EAAAP,UAAAC,IAAA,cAAA,oBACA,IAAAb,EAAAD,wBAAAM,EAAAc,KAAAd,EAAAF,MACAgB,EAAAC,IAAA,YAAApB,EAAA,OACAkB,EAAApB,YAAAqB,GAEA,IAAAE,EAAA5B,UAAAyB,GACAG,EAAAC,UAAAC,UAAAlB,EAAAgB,MAAAhB,EAAAU,MACAM,EAAAT,UAAAC,IAAA,eAEA,IAAAW,EAAA5B,SAAAC,cAAA,OACA2B,EAAAZ,UAAAC,IAAA,eACAb,EAAAD,wBAAA,QAAAM,EAAAF,MACAqB,EAAAJ,IAAA,YAAApB,EAAA,OACAkB,EAAApB,YAAA0B,IAGAD,UAAA,SAAAE,EAAAC,GAEA,IAAAC,OAAAC,EACA,OAAAF,GACA,IAAA,IACA,IAAA,IACAC,EAAA,GACA,MACA,IAAA,IACAA,EAAA,GAGA,OAAAF,EAAAI,OAAAF,EAAAF,EAEAA,EAAAK,MAAA,EAAAH,GAAA,OAGAI,aAAA,SAAA1B,EAAAM,GACA,IAAAqB,EAAAvC,UAAAkB,GACAqB,EAAApB,UAAAC,IAAA,oBACA,MAAAR,EAAAU,MACAiB,EAAApB,UAAAC,IAAA,sBAEAX,WAAAG,EAAAF,OACA6B,EAAApB,UAAAC,IAAA,uCAGApB,UAAAuC,GACAV,UAAAjB,EAAA4B,OAEAxC,UAAAuC,GACAV,UAAAjB,EAAA6B,MAGAC,sBAAA,SAAAxB,GACA,IAAAyB,EAAA3C,UAAAkB,GAEA,OADAyB,EAAAxB,UAAAC,IAAA,iBACAuB,GAGAC,kBAAA,SAAAhC,EAAAM,GACA,GAAAN,EAAAiC,YAAA,CAEA,IAAAA,EAAA7C,UAAAkB,GACA,MAAAN,EAAAU,MACAuB,EAAA1B,UAAAC,IAAA,uBAEAX,WAAAG,EAAAF,OACAmC,EAAA1B,UAAAC,IAAA,qBAEAyB,EAAAhB,UAAAjB,EAAAiC,cAGAC,aAAA,SAAAlC,EAAAM,GACA,GAAA,WAAAN,EAAAc,MAAAd,EAAAC,MAAAD,EAAAC,KAAAkC,MAAA,CAEA,IAAAC,EAAA7C,SAAAc,eAAA,UACA+B,EAAAC,QAAAC,cAAA,iBAAAvB,IAAAf,EAAAC,KAAAsC,WACAH,EAAAC,QAAAC,cAAA,iBAAArB,UAAAjB,EAAAC,KAAAuC,OAAA,MAAAxC,EAAAC,KAAAkC,MAAAM,KACAL,EAAAC,QAAAC,cAAA,uBAAArB,UAAAjB,EAAAC,KAAAkC,MAAAX,OACAY,EAAAC,QAAAC,cAAA,yBAAArB,UAAAjB,EAAAC,KAAAyC,OAAA,IACA,IAAAC,EAAApD,SAAAqD,WAAAR,EAAAC,SAAA,GACA/B,EAAAb,YAAAkD,KAGAE,oBAAA,SAAA7C,EAAAM,GACA,GAAAP,iBAAAC,GAAA,CAEA,IAAA8C,EAAA1D,UAAAkB,GAGA,GAFAwC,EAAAvC,UAAAC,IAAA,yBAEA,QAAAR,EAAAc,KAAA,CACA,IAAAiC,EAAA3D,UAAA0D,GACAC,EAAAC,aAAA,KAAA,UACAD,EAAAC,aAAA,eAAA,QACAD,EAAAxC,UAAAC,IAAA,sBAEA,IAAAyC,EAAA1D,SAAAC,cAAA,YACAyD,EAAAD,aAAA,KAAA,mBACAC,EAAA1C,UAAAC,IAAA,yBAAA,kBACAyC,EAAAD,aAAA,MAAA,OACAC,EAAAD,aAAA,QAAA,MACAF,EAAArD,YAAAwD,OACA,CACA,IAAA/C,EAAAX,SAAAC,cAAA,OACAU,EAAAK,UAAAC,IAAA,cAAA,2BACAN,EAAAa,IAAA,2BACAb,EAAAgD,OAAA,6FACAhD,EAAAiD,MAAA,6DACAL,EAAArD,YAAAS,MAIAkD,cAAA,SAAApD,EAAAM,GACA,GAAAN,EAAAC,MAAAD,EAAAC,KAAAoD,QAAA,CAEA,IAAAC,EAAAlE,UAAAkB,GACAgD,EAAA/C,UAAAC,IAAA,aAEAR,EAAAC,KAAAoD,QAAAE,QAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAtE,UAAAkE,GACAI,EAAAnD,UAAAC,IAAA,gBACA,IAAAiD,GACAC,EAAAnD,UAAAC,IAAA,uBAEAkD,EAAAzC,UAAAuC,MAIAG,mBAAA,SAAA3D,EAAAM,GACA,GAAAN,EAAAC,MAAAD,EAAAC,KAAA2D,aAAA5D,EAAAC,KAAA4D,SAAA,CAEA,IAAAC,EAAA1E,UAAAkB,GACAwD,EAAAvD,UAAAC,IAAA,sBAEA,IAAAuD,EAAA,GACA/D,EAAAC,KAAA2D,aACAG,EAAAC,KAAA,CAAA,cAAA,qBAAA,OAEAhE,EAAAC,KAAA4D,UACAE,EAAAC,KAAA,CAAA,WAAA,mBAAA,MAGAD,EAAAR,QAAA,SAAAtD,GACA,IAAAgE,EAAA1E,SAAAc,eAAA,eACA4D,EAAA5B,QAAAC,cAAA,sBAAArB,UAAAhB,EAAA,GACAgE,EAAA5B,QAAAC,cAAA,uBAAArB,UAAAjB,EAAAC,KAAAA,EAAA,IAAAA,EAAA,GACA,IAAA0C,EAAApD,SAAAqD,WAAAqB,EAAA5B,SAAA,GACAyB,EAAArE,YAAAkD,OAIAuB,sBAAA,SAAAC,GACA,IAAAA,EAAA5D,UAAAiB,QAAA2C,EAAA5D,UAAA6D,SAAA,uBACAD,EAAA5D,UAAAC,IAAA,uBAGA6D,kBAAA,SAAA/D,GACA,IAAAgE,EAAA/E,SAAAC,cAAA,OACA8E,EAAA/D,UAAAC,IAAA,gBACA8D,EAAAvD,IAAA,oBAEA,IAAAwD,OAAAhD,EACAjB,EAAAkE,iBAAAjE,UAAA6D,SAAA,qBACAE,EAAA/D,UAAAC,IAAA,yBACA+D,EAAAjE,GACAA,EAAAkE,iBAAAjE,UAAA6D,SAAA,WACA9D,EAAAkE,iBAAAjE,UAAA6D,SAAA,0BACA9D,EAAAkE,iBAAAjE,UAAA6D,SAAA,uBACAG,EAAAjE,EAAAkE,iBAAAC,wBACAlE,UAAAC,IAAA,uBAEA+D,EAAAjE,EAAAkE,kBACAjE,UAAAC,IAAA,sBAGA+D,EAAA9E,YAAA6E,IAGAI,sBAAA,SAAApE,GACA,IAAAqE,EAAAvF,UAAAkB,GACAqE,EAAA3B,aAAA,KAAA,oBACA2B,EAAApE,UAAAC,IAAA,qBAAA,0BAEApB,UAAAuF,GACA1D,UAAA,kBAEA7B,UAAAuF,GACA1D,UAAA,iBAGA2D,cAAA,SAAAC,GACAA,EAAAC,OAAAvB,QAAA,SAAAvD,GACA,IAAAM,EAAAH,aACAM,QAAAT,EAAAM,GACAK,QAAAX,EAAAM,GACAM,cAAAZ,EAAAM,GACAoB,aAAA1B,EAAAM,GAEAT,WAAAG,EAAAF,QACAQ,EAAAwB,sBAAAxB,IAEA0B,kBAAAhC,EAAAM,GACA4B,aAAAlC,EAAAM,GACAuC,oBAAA7C,EAAAM,GACA8C,cAAApD,EAAAM,GACAqD,mBAAA3D,EAAAM,GAEA+D,kBAAA/D,GACA4D,sBAAA5D,EAAAkE,kBAEA,QAAAxE,EAAAc,MACA4D,sBAAApE,MAIAyE,IAAA,IAAAC,eACAD,IAAAE,KAAA,OAAA,eAAA,GACAF,IAAAG,mBAAA,WACA,GAAAC,KAAAC,YACAR,cAAAS,KAAAC,MAAAH,KAAAI,YAEAR,IAAAS,OCtQA,IAAAzC,OAAAxD,SAAAc,eAAA,UACAsE,gBAAApF,SAAAc,eAAA,oBACAoF,eAAAlG,SAAAc,eAAA,mBAEAqF,cAAA,WACA,MAAA,iBAAAnG,SAAAoG,iBAGAC,uBAAA,WACAH,eAAAlF,UAAAC,IAAA,kCACAmE,gBAAApE,UAAAC,IAAA,mCAGAqF,YAAA,WACA,IAAAC,EAAAC,OAAAC,iBAAAjD,QACAkD,EAAAC,SAAAJ,EAAAK,iBAAA,mBAAA1E,MAAA,GAAA,IAEA2E,EAAA,GACAC,EAAA,GACAC,OAAA/E,EACAgF,OAAAhF,EACAiF,EAAA,EAEAC,EACA,EADAA,EAEAR,EAFAQ,EAGAR,EAAA,IAHAQ,EAIA,IAJAA,EAKA,GALAA,EAMA,EAGAC,EAAA,CACAC,sBAAAV,EACAW,gBAAA,EACAC,kBAAA,KAGA9D,OAAA+D,iBAAA,cAAA,SAAA9G,GACA+C,OAAAgE,kBAAA/G,EAAAgH,WACAZ,EAAApC,KAAA,CACAgD,UAAAhH,EAAAgH,UACAC,OAAAjH,EAAAkH,EACAC,OAAAnH,EAAAoH,EACAT,sBAAAD,EAAAC,sBACAC,gBAAAF,EAAAE,kBAGA5G,EAAAqH,YACAf,EAAAgB,KAAAC,KACAD,KAAAE,IAAApB,EAAA,GAAAa,OAAAb,EAAA,GAAAa,OAAA,GACAK,KAAAE,IAAApB,EAAA,GAAAe,OAAAf,EAAA,GAAAe,OAAA,OAIApE,OAAA+D,iBAAA,cAAA,SAAA9G,GACA,OAAAqG,GACA,IAAA,MACAoB,EAAAzH,GACA,MACA,IAAA,QACA0H,EAAA1H,GACA,MACA,IAAA,SACA2H,EAAA3H,GACA,MACA,QACA4H,EAAA5H,MAKA,IAAA4H,EAAA,SAAA5H,GAEA,OADAoG,EAAA5E,QAEA,KAAA,EACAiG,EAAAzH,GACA,MACA,KAAA,EACA6H,EAAA7H,GACA,MACA,QACA8H,QAAAC,IAAA,0BAKAF,EAAA,SAAA7H,GACA,IAAAgI,EAAAC,EAAAjI,GAAAsG,EACAE,IAEA,GAAAc,KAAAY,IAAAF,GACA3B,EAAA,QACA,GAAAG,IACAH,EAAA,WAIA4B,EAAA,SAAAjI,GAAA,IACAgH,EAAAhH,EAAAgH,UAAAE,EAAAlH,EAAAkH,EAAAE,EAAApH,EAAAoH,EACAe,EAAAnB,IAAAZ,EAAA,GAAAY,UACAZ,EAAA,GACAA,EAAA,GACAgC,EAAApB,IAAAZ,EAAA,GAAAY,UACAZ,EAAA,GACAA,EAAA,GAKA,OAHAgC,EAAAnB,OAAAC,EACAkB,EAAAjB,OAAAC,EAEAE,KAAAC,KACAD,KAAAE,IAAAN,EAAAiB,EAAAlB,OAAA,GACAK,KAAAE,IAAAJ,EAAAe,EAAAhB,OAAA,KAGAM,EAAA,SAAAzH,GAOA,GAJA,KAFAwG,IAGAH,EAAA,OAGArG,EAAAqH,UAAA,CAPA,IAAAgB,EASAjC,EAAA,GAAAa,EATAoB,EASApB,OAAAL,EATAyB,EASAzB,gBAEAoB,EADAhI,EAAAkH,EACAD,EAEAL,EAAAoB,GAAA,EAAAvB,GAAAA,EAAAG,EAAAoB,IAEAjF,OAAAuF,MAAAC,oBAAA3B,EAAAoB,EAAA,KACAtB,EAAAE,gBAAAA,EAAAoB,EAEAvC,eAAAzC,aAAA,QAAA,IAAAyD,EAAAC,EAAAE,gBAAAH,OAGAiB,EAAA,SAAA1H,GACA,IAAAwI,EAAAP,EAAAjI,GACAyI,GAAAD,EAAAlC,GAAAG,EACAH,EAAAkC,EAEA,IAAAE,EAAAhC,EAAAC,sBAAA8B,EACA,KAAAC,EAAAjC,GAAAA,EAAAiC,GAAA,CAEAhC,EAAAC,sBAAA+B,EACA3F,OAAAuF,MAAAK,eAAAD,EAAA,KAEA,IAAAE,EAAAtB,KAAAuB,OAAAH,EAAAjC,IACAA,EAAAA,GAAA,KACA9B,gBAAAmE,kBAAA7H,UAAA,gBAAA2H,EAAA,MAGAjB,EAAA,SAAA3H,GAAA,IACAkH,EAAAlH,EAAAkH,EAAAE,EAAApH,EAAAoH,EAAAC,EAAArH,EAAAqH,UAAAL,EAAAhH,EAAAgH,UACA,IAAAK,EAAA,CAEA,IAAAc,EAAAnB,IAAAZ,EAAA,GAAAY,UACAZ,EAAA,GACAA,EAAA,GAEA2C,EAAAzB,KAAA0B,MAAAb,EAAAhB,OAAAC,EAAAe,EAAAlB,OAAAC,GAEAX,IACAA,EAAAwC,GAEA,IAAAE,EAAA,EAAAF,EAAAxC,EAAA,GAAA,EACAA,EAAAwC,EAEArC,EAAAG,kBAAAoC,EAAA,IAEAvC,EAAAG,mBAAAoC,EACAlG,OAAAuF,MAAAY,aAAA,cAAAxC,EAAAG,kBAAA,KACAlC,gBAAAH,iBAAAvD,UAAA,YAAAyF,EAAAG,kBAAA,OAGAsC,EAAA,SAAAnJ,GACA,IAAAoG,EAAA5E,SAGA+E,EADAD,OAAA/E,EAEAiF,EAAA,EAGA,cAAAxG,EAAAF,MAAA,WAAAuG,GACAD,EAAAgD,MACA,IAAAhD,EAAA5E,SACA6E,EAAA,MAEAD,EAAA,GACAC,EAAA,MAIAtD,OAAA+D,iBAAA,YAAAqC,GACApG,OAAA+D,iBAAA,gBAAAqC,IAIAzD,kBACAE,yBACAC,eCrMA,IAHA,IAAAwD,SAAA9J,SAAA+J,uBAAA,aACAC,KAAAhK,SAAA+J,uBAAA,OAEA7F,EAAA,EAAAA,EAAA8F,KAAA/H,OAAAiC,IACA8F,KAAA9F,GAAA+F,SAAA,GAAAjJ,UAAAkJ,OAAA,oBAGA,IAAA,IAAAhG,GAAA,EAAAA,GAAA4F,SAAA7H,OAAAiC,KACA4F,SAAA5F,IAAAqD,iBAAA,QAAA,SAAA4C,GACA,IAAA,IAAAC,EAAA,EAAAA,EAAAD,EAAAE,OAAAC,WAAAL,SAAAhI,OAAAmI,IACAD,EAAAE,OAAAC,WAAAL,SAAAG,GAAApJ,UAAAuJ,OAAA,oBAEAJ,EAAAE,OAAArJ,UAAAkJ,OAAA,sBCZAlK,SAAAc,eAAA,kBAAAyG,iBAAA,QAAA,WACAvH,SAAAc,eAAA,WAAAE,UAAAkJ,OAAA","file":"scripts.min.js","sourcesContent":["const appendDiv = (parent) => {\r\n    const div = document.createElement(\"div\");\r\n    parent.appendChild(div);\r\n    return div;\r\n}\r\n\r\nconst getIconThemeByEventType = (iconName, eventType) => {\r\n    if (!isCritical(eventType)) return iconName;\r\n    return `${iconName}-white`;\r\n}\r\n\r\nconst isCritical = (type) => {\r\n    return type === 'critical';\r\n}\r\n\r\nconst hasAttachedImage = (event) => {\r\n    return !!event.data && (!!event.data.image || (!!event.data.type && event.data.type === 'graph'));\r\n}\r\n\r\nconst createCard = () => {\r\n    const ribbon = document.getElementById(\"ribbon\");\r\n    const card = appendDiv(ribbon);\r\n    card.classList.add(\"card\");\r\n    return card;\r\n}\r\n\r\nconst setSize = (event, card) => {\r\n    card.classList.add(`card_${event.size}`);\r\n}\r\n\r\nconst setType = (event, card) => {\r\n    if (isCritical(event.type)) {\r\n        card.classList.add('card_critical');\r\n    }\r\n    if (hasAttachedImage(event)) {\r\n        card.classList.add('card_with-image');\r\n    }\r\n}\r\n\r\nconst setCardHeader = (event, card) => {\r\n    const header = appendDiv(card);\r\n    header.classList.add(\"card__row\");\r\n\r\n    const icon = document.createElement(\"img\");\r\n    icon.classList.add(\"card__image\", \"card__image_icon\");\r\n    let iconName = getIconThemeByEventType(event.icon, event.type);\r\n    icon.src = `./images/${iconName}.svg`;\r\n    header.appendChild(icon);\r\n\r\n    const title = appendDiv(header);\r\n    title.innerHTML = trimTitle(event.title, event.size);\r\n    title.classList.add(\"card__title\");\r\n    \r\n    const close = document.createElement(\"img\");\r\n    close.classList.add(\"card__close\");\r\n    iconName = getIconThemeByEventType('cross', event.type);\r\n    close.src = `./images/${iconName}.svg`;\r\n    header.appendChild(close);\r\n}\r\n\r\nconst trimTitle = (str, cardSize) => {\r\n    // The ugly way\r\n    let allowedCharWidth = undefined;\r\n    switch (cardSize) {\r\n        case 'l':\r\n        case 'm':\r\n            allowedCharWidth = 50;\r\n            break;\r\n        case 's':\r\n            allowedCharWidth = 20;\r\n            break;\r\n    };\r\n    if (str.length < allowedCharWidth) return str;\r\n\r\n    return str.slice(0, allowedCharWidth) + '...';\r\n}\r\n\r\nconst setBasicInfo = (event, card) => {\r\n    const basicInfo = appendDiv(card);\r\n    basicInfo.classList.add(\"card__basic-info\");\r\n    if (event.size === 's') {\r\n        basicInfo.classList.add(\"card__basic-info_s\");\r\n    }\r\n    if (isCritical(event.type)) {\r\n        basicInfo.classList.add(\"card__basic-info_with-bottom-margin\");\r\n    }\r\n\r\n    const device = appendDiv(basicInfo);\r\n    device.innerHTML = event.source;\r\n\r\n    const time = appendDiv(basicInfo);\r\n    time.innerHTML = event.time;\r\n}\r\n\r\nconst appendCriticalDetails = (card) => {\r\n    const details = appendDiv(card);\r\n    details.classList.add(\"card__details\");\r\n    return details;\r\n}\r\n\r\nconst appendDescription = (event, card) => {\r\n    if (!event.description) return;\r\n\r\n    const description = appendDiv(card);\r\n    if (event.size === 'l') {\r\n        description.classList.add(\"card__description_l\");\r\n    }\r\n    if (!isCritical(event.type)) {\r\n        description.classList.add(\"card__description\");\r\n    }\r\n    description.innerHTML = event.description;\r\n}\r\n\r\nconst appendPlayer = (event, card) => {\r\n    if (!event.icon === 'music' || !event.data || !event.data.track) return;\r\n\r\n    const player = document.getElementById('player');\r\n    player.content.querySelector('.player__logo').src = event.data.albumcover;\r\n    player.content.querySelector('.player__name').innerHTML = `${event.data.artist} - ${event.data.track.name}`;\r\n    player.content.querySelector('.player__value_time').innerHTML = event.data.track.length;\r\n    player.content.querySelector('.player__value_volume').innerHTML = `${event.data.volume}%`;\r\n    const clone = document.importNode(player.content, true);\r\n    card.appendChild(clone);\r\n}\r\n\r\nconst appendAttachedImage = (event, card) => {\r\n    if (!hasAttachedImage(event)) return;\r\n\r\n    const container = appendDiv(card);\r\n    container.classList.add(\"card__image-container\");\r\n\r\n    if (event.icon === 'cam') {\r\n        const camera = appendDiv(container);\r\n        camera.setAttribute(\"id\", \"camera\");\r\n        camera.setAttribute(\"touch-action\", \"none\");\r\n        camera.classList.add(\"card__image_camera\");\r\n\r\n        const progress = document.createElement(\"progress\");\r\n        progress.setAttribute(\"id\", \"camera-progress\");\r\n        progress.classList.add(\"card__camera-interface\", \"card__progress\");\r\n        progress.setAttribute(\"max\", \"100\");\r\n        progress.setAttribute(\"value\", \"50\");\r\n        container.appendChild(progress);\r\n    } else {\r\n        const image = document.createElement(\"img\");\r\n        image.classList.add(\"card__image\", \"card__image_attachement\");\r\n        image.src = './images/Richdata@3x.png';\r\n        image.srcset = './images/Richdata.png 590w, ./images/Richdata@2x.png 1080w, ./images/Richdata@3x.png 1770w';\r\n        image.sizes = '(max-width: 650px) 560px, (max-width: 910px) 910px, 1100px';\r\n        container.appendChild(image);\r\n    }\r\n}\r\n\r\nconst appendButtons = (event, card) => {\r\n    if (!event.data || !event.data.buttons) return;\r\n\r\n    const buttonRow = appendDiv(card);\r\n    buttonRow.classList.add(\"card__row\");\r\n\r\n    event.data.buttons.forEach((buttonText, i) => {\r\n        const button = appendDiv(buttonRow);\r\n        button.classList.add(\"card__button\");\r\n        if (i === 0) {\r\n            button.classList.add(\"card__button_accent\");\r\n        }\r\n        button.innerHTML = buttonText;\r\n    });\r\n}\r\n\r\nconst appendMeasurements = (event, card) => {\r\n    if (!event.data || !event.data.temperature || !event.data.humidity) return;\r\n\r\n    const measurements = appendDiv(card);\r\n    measurements.classList.add(\"card__measurements\");\r\n\r\n    let measurementData = [];\r\n    if (!!event.data.temperature) {\r\n        measurementData.push(['temperature', 'Температура:&nbsp;', ' C']);\r\n    }\r\n    if (!!event.data.humidity) {\r\n        measurementData.push(['humidity', 'Влажность:&nbsp;', '%']);\r\n    }\r\n\r\n    measurementData.forEach((data) => {\r\n        const measurement = document.getElementById('measurement');\r\n        measurement.content.querySelector('.measurement__text').innerHTML = data[1];\r\n        measurement.content.querySelector('.measurement__value').innerHTML = event.data[data[0]] + data[2];\r\n        const clone = document.importNode(measurement.content, true);\r\n        measurements.appendChild(clone);\r\n    });\r\n}\r\n\r\nconst markLastElementInCard = (lastChild) => {\r\n    if (lastChild.classList.length === 1 && lastChild.classList.contains('card__expander-row')) return;\r\n    lastChild.classList.add(\"card__last-element\");\r\n}\r\n\r\nconst placeExpandButton = (card) => {\r\n    const expand = document.createElement(\"img\");\r\n    expand.classList.add(\"card__expand\");\r\n    expand.src = `./images/next.svg`;\r\n    \r\n    let expandableSibling = undefined;\r\n    if (card.lastElementChild.classList.contains('card__basic-info')) {\r\n        expand.classList.add(\"card__expand_absolute\");\r\n        expandableSibling = card;\r\n    } else if (card.lastElementChild.classList.contains('player') \r\n    || card.lastElementChild.classList.contains('card__image-container')\r\n    || card.lastElementChild.classList.contains('card__measurements')) {\r\n        expandableSibling = card.lastElementChild.previousElementSibling;\r\n        expandableSibling.classList.add(\"card__expander-row\");\r\n    } else {\r\n        expandableSibling = card.lastElementChild;\r\n        expandableSibling.classList.add(\"card__expander-row\");\r\n    }\r\n\r\n    expandableSibling.appendChild(expand);\r\n}\r\n\r\nconst appendCameraInterface = (card) => {\r\n    const cameraInterface = appendDiv(card);\r\n    cameraInterface.setAttribute(\"id\", \"camera-interface\");\r\n    cameraInterface.classList.add(\"card__measurements\", 'card__camera-interface');\r\n\r\n    const zoom = appendDiv(cameraInterface);\r\n    zoom.innerHTML = 'Приближение: 0%';\r\n\r\n    const brightness = appendDiv(cameraInterface);\r\n    brightness.innerHTML = 'Яркость: 100%';\r\n}\r\n\r\nconst generateCards = (cardsData) => {\r\n    cardsData.events.forEach((event) => {\r\n        let card = createCard();\r\n        setSize(event, card);\r\n        setType(event, card);\r\n        setCardHeader(event, card);\r\n        setBasicInfo(event, card);\r\n\r\n        if (isCritical(event.type))\r\n            card = appendCriticalDetails(card);\r\n\r\n        appendDescription(event, card);\r\n        appendPlayer(event, card);\r\n        appendAttachedImage(event, card);\r\n        appendButtons(event, card);\r\n        appendMeasurements(event, card);\r\n\r\n        placeExpandButton(card);\r\n        markLastElementInCard(card.lastElementChild);\r\n\r\n        if (event.icon === 'cam') \r\n            appendCameraInterface(card);\r\n    });\r\n}\r\n\r\nconst xhr = new XMLHttpRequest();\r\nxhr.open('POST', '/api/events', true);\r\nxhr.onreadystatechange = function() {\r\n  if (this.readyState != 4) return;\r\n  generateCards(JSON.parse(this.response));\r\n}\r\nxhr.send();\r\n","const camera = document.getElementById(\"camera\");\r\nconst cameraInterface = document.getElementById(\"camera-interface\");\r\nconst cameraProgress = document.getElementById(\"camera-progress\");\r\n\r\nconst isTouchDevice = () => {\r\n    return \"ontouchstart\" in document.documentElement;\r\n}\r\n\r\nconst turnGestureInterfaceOn = () => {\r\n    cameraProgress.classList.add('card__camera-interface_enabled');\r\n    cameraInterface.classList.add('card__camera-interface_enabled');\r\n}\r\n\r\nconst setGestures = () => {\r\n    const cameraStyle = window.getComputedStyle(camera);\r\n    const initialBackgroundSize = parseInt(cameraStyle.getPropertyValue('background-size').slice(0, -2));\r\n\r\n    let currentGesture = [];\r\n    let currentGestureName = \"\";\r\n    let initialFingerDistance = undefined;\r\n    let prevFingerAtan = undefined;\r\n    let recognizeMoves = 0;\r\n\r\n    const constants = {\r\n        zoomSpeed: 2,\r\n        minimumBackgroundSize: initialBackgroundSize,\r\n        maximumBackgroundSize: initialBackgroundSize + 500,\r\n        imageBorders: 160,\r\n        progressMiddleValue: 50,\r\n        progressSpeed: 3\r\n    };\r\n\r\n    const cameraState = {\r\n        currentBackgroundSize: initialBackgroundSize,\r\n        currentPosition: 0,\r\n        currentBrightness: 100\r\n    };\r\n\r\n    camera.addEventListener('pointerdown', (event) => {\r\n        camera.setPointerCapture(event.pointerId);\r\n        currentGesture.push({\r\n            pointerId: event.pointerId,\r\n            startX: event.x,\r\n            startY: event.y,\r\n            currentBackgroundSize: cameraState.currentBackgroundSize,\r\n            currentPosition: cameraState.currentPosition,\r\n        });\r\n\r\n        if (!event.isPrimary) {\r\n            initialFingerDistance = Math.sqrt(\r\n                Math.pow(currentGesture[0].startX - currentGesture[1].startX, 2) + \r\n                Math.pow(currentGesture[0].startY - currentGesture[1].startY, 2));\r\n        }\r\n    });\r\n\r\n    camera.addEventListener('pointermove', (event) => {\r\n        switch (currentGestureName) {\r\n            case 'pan':\r\n                panX(event);\r\n                break;\r\n            case 'pinch':\r\n                pinch(event);\r\n                break;\r\n            case 'rotate':\r\n                rotate(event);\r\n                break;\r\n            default:\r\n                recognizeGesture(event);\r\n                break;\r\n        }\r\n    });\r\n\r\n    const recognizeGesture = (event) => {\r\n        const fingersCount = currentGesture.length;\r\n        switch (fingersCount) {\r\n            case 1:\r\n                panX(event);\r\n                break;\r\n            case 2:\r\n                recognizeTwoFingerGesture(event);\r\n                break;\r\n            default:\r\n                console.log('Unrecognized gesture');\r\n                break;\r\n        }\r\n    }\r\n\r\n    const recognizeTwoFingerGesture = (event) => {\r\n        const dx = calculateNewDistance(event) - initialFingerDistance;\r\n        recognizeMoves++;\r\n\r\n        if (Math.abs(dx) > 35) {\r\n            currentGestureName = \"pinch\";\r\n        } else if (recognizeMoves > 30) {\r\n            currentGestureName = \"rotate\";\r\n        }\r\n    }\r\n\r\n    const calculateNewDistance = (event) => {\r\n        const {pointerId, x, y} = event;\r\n        const fixedFinger = pointerId !== currentGesture[0].pointerId \r\n            ? currentGesture[0] \r\n            : currentGesture[1];\r\n        const movedFinger = pointerId !== currentGesture[0].pointerId\r\n            ? currentGesture[1] \r\n            : currentGesture[0];\r\n\r\n        movedFinger.startX = x;\r\n        movedFinger.startY = y;\r\n\r\n        return Math.sqrt(\r\n            Math.pow(x - fixedFinger.startX, 2) + \r\n            Math.pow(y - fixedFinger.startY, 2));\r\n    }\r\n\r\n    const panX = (event) => {\r\n        recognizeMoves++;\r\n        // Some time to place second finger if intended\r\n        if (recognizeMoves > 10) {\r\n            currentGestureName = 'pan';\r\n        }\r\n\r\n        if (!event.isPrimary) return;\r\n        \r\n        const {startX, currentPosition}  = currentGesture[0];\r\n        const {x} = event;\r\n        const dx = x - startX;\r\n\r\n        if (currentPosition + dx < constants.imageBorders*(-1) || currentPosition + dx > constants.imageBorders) return;\r\n\r\n        camera.style.backgroundPositionX = `${currentPosition + dx}px`;\r\n        cameraState.currentPosition = currentPosition + dx;\r\n\r\n        cameraProgress.setAttribute('value', `${constants.progressMiddleValue - cameraState.currentPosition / constants.progressSpeed}`);\r\n    }\r\n\r\n    const pinch = (event) => {\r\n        const newDistance = calculateNewDistance(event);\r\n        const zoomDelta = (newDistance - initialFingerDistance) * constants.zoomSpeed;\r\n        initialFingerDistance = newDistance;\r\n\r\n        const newBackgroundSize = cameraState.currentBackgroundSize + zoomDelta;\r\n        if (newBackgroundSize < constants.minimumBackgroundSize || newBackgroundSize > constants.maximumBackgroundSize) return;\r\n\r\n        cameraState.currentBackgroundSize = newBackgroundSize;\r\n        camera.style.backgroundSize = `${newBackgroundSize}px`;\r\n\r\n        const zoomPercentValue = Math.round((newBackgroundSize - constants.minimumBackgroundSize) \r\n            / (constants.maximumBackgroundSize - constants.minimumBackgroundSize) * 100);\r\n        cameraInterface.firstElementChild.innerHTML = `Приближение: ${zoomPercentValue}%`;\r\n    }\r\n\r\n    const rotate = (event) => {\r\n        const {x, y, isPrimary, pointerId} = event;\r\n        if (isPrimary) return;\r\n\r\n        const fixedFinger = pointerId !== currentGesture[0].pointerId \r\n            ? currentGesture[0] \r\n            : currentGesture[1];\r\n        \r\n        const fingerAtan = Math.atan2(fixedFinger.startY - y, fixedFinger.startX - x);\r\n\r\n        if (!prevFingerAtan)\r\n            prevFingerAtan = fingerAtan;\r\n\r\n        const increment = fingerAtan - prevFingerAtan > 0 ? 1 : -1;\r\n        prevFingerAtan = fingerAtan;\r\n\r\n        if (cameraState.currentBrightness + increment < 0) return;\r\n\r\n        cameraState.currentBrightness += increment;\r\n        camera.style.webkitFilter = `brightness(${cameraState.currentBrightness}%)`;\r\n        cameraInterface.lastElementChild.innerHTML = `Яркость: ${cameraState.currentBrightness}%`;\r\n    }\r\n\r\n    const cancelGesture = (event) => {\r\n        if (currentGesture.length === 0) return;\r\n        \r\n        initialFingerDistance = undefined;\r\n        prevFingerAtan = undefined;\r\n        recognizeMoves = 0;\r\n\r\n        // allow replace finger multiple times in rotation move\r\n        if (event.type === 'pointerup' && currentGestureName === \"rotate\") {\r\n            currentGesture.pop();\r\n            if (currentGesture.length === 0)\r\n                currentGestureName = \"\";\r\n        } else {\r\n            currentGesture = [];\r\n            currentGestureName = \"\";\r\n        }\r\n    }\r\n\r\n    camera.addEventListener('pointerup', cancelGesture);\r\n    camera.addEventListener('pointercancel', cancelGesture);\r\n}\r\n\r\n\r\nif (isTouchDevice()) {\r\n    turnGestureInterfaceOn();\r\n    setGestures();\r\n}\r\n","const navItems = document.getElementsByClassName('nav__item');\r\nconst navs = document.getElementsByClassName('nav');\r\n\r\nfor (let i = 0; i < navs.length; i++) {\r\n    navs[i].children[0].classList.toggle('nav__item_active');\r\n}\r\n\r\nfor (let i = 0; i < navItems.length; i++) {\r\n    navItems[i].addEventListener('click', (e) => {\r\n        for (let j = 0; j < e.target.parentNode.children.length; j++) {\r\n            e.target.parentNode.children[j].classList.remove('nav__item_active');\r\n        }\r\n        e.target.classList.toggle('nav__item_active');\r\n    })\r\n}","document.getElementById(\"toggle-sidebar\").addEventListener(\"click\", () => {\r\n    document.getElementById(\"sidebar\").classList.toggle(\"sidebar_opened\");\r\n})"]}